xpathSApply(z, "//zipcode", xmlValue)
doc <- xmlTreeParse("restaurant2.xml", useInternalNodes = TRUE)
doc
doc
top <- xmlRoot(doc)
top
names(top)
z <- top[["row"]]
z
xpathSApply(z, "//zipcode", xmlValue)
g <- xpathSApply(z, "//zipcode", xmlValue)
g
g[g=="21224"]
g[g=="21224"].lenght
g[g=="21224"].length
g[g=="21224"]
g[g=="21231"]
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "idaho.csv", curl)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "idaho.csv", "curl")
library(data.table)
DT <- fread()
DT <- fread("idaho.csv")
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
DT[,mean(pwgtp15),by=SEX]
tapply(DT$pwgtp15,DT$SEX,mean)
mean(DT$pwgtp15,by=DT$SEX)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
sapply(split(DT$pwgtp15,DT$SEX),mean)
help time()
con <- url(http://biostat.jhsph.edu/~jleek/contact.html)
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlcode <- readlines(con)
?readline
?readlines
con
?urtl
?url
?readLines
readLines(con)
lines <- readLines(con)
?nchar
nchar(lines[1])
nchar(lines[10])
nchar(lines[20])
nchar(lines[30])
nchar(lines[100])
close(con)
?readLines
?url
?con
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", destfile="wkst.for", method="curl")
read.table("wkst.for")
head("wkst.for")
?
read.table
;
?read.table
read.table("wkst.for", header=TRUE)
read.table("wkst.for", header=TRUE, sep=" ")
read.table("wkst.for", sep=" ")
?fread
library(data.table)
?fread
fread("wkst.for")
?read.table
read.table("wkst.for", strip.white = TRUE)
count.fields("wkst.for")
scan("wkst.for")
scan("wkst.for", skip=1)
read.table("wkst.for", nrows=1)
read.table("wkst.for", nrows=2)
read.table("wkst.for", nrows=2, header=TRUE)
read.table("wkst.for", nrows=2, skip=1)
read.table("wkst.for", nrows=2, skip=20
read.table("wkst.for", nrows=2, skip=2)
read.table("wkst.for", nrows=2, skip=2)
read.table("wkst.for", nrows=5, skip=4)
?read.table
read.table("wkst.for", header=TRUE, sep=" ")
read.table("wkst.for", sep=" ")
?download.file
read.table("wkst.for", strip.white = TRUE)
read.table("wkst.for", strip.white = TRUE, skip=1)
read.table("wkst.for", header=TRUE, strip.white = TRUE)
read.table("wkst.for", header=TRUE, strip.white = TRUE, nrows=1)_
read.table("wkst.for", header=TRUE, strip.white = TRUE, nrows=1)
?read.table
read.table("wkst.for", header=TRUE, blank.lines.skip = TRUE)
read.table("wkst.for", nrows=1, header=TRUE, blank.lines.skip = TRUE)
read.table("wkst.for", nrows=1)
read.table("wkst.for", nrows=1, header=TRUE)
read.table("wkst.for", nrows=1, header=TRUE)
read.table("wkst.for", nrows=1, header=TRUE, skip=1)
read.table("wkst.for", nrows=1, skip=1)
read.table("wkst.for", nrows=2, skip=1)
read.table("wkst.for", nrows=1, skip=1)
read.table("wkst.for", nrows=1, skip=1, header=TRUE)
read.table("wkst.for", nrows=1, skip=1, header=TRUE, blank.lines.skip = TRUE)
read.table("wkst.for", sep="-", nrows=1, skip=1, header=TRUE, blank.lines.skip = TRUE)
read.table("wkst.for", sep="-", nrows=1, skip=2, header=TRUE, blank.lines.skip = TRUE)
read.table("wkst.for", sep="-", nrows=2, skip=2, header=TRUE, blank.lines.skip = TRUE)
read.table("wkst.for", sep="-", nrows=2, skip=1, header=TRUE, blank.lines.skip = TRUE)
read.table("wkst.for", sep=" -", nrows=2, skip=1, header=TRUE, blank.lines.skip = TRUE)
?read.csv
read.fwf("wkst.for")
read.fwf("wkst.for", widths=c(9,4,4,4,4,4,4,4,4))
read.fwf("wkst.for", widths=c(9,4,4,4,4,4,4,4,4), sep=" ")
read.fwf("wkst.for", widths=c(9,4,4,4,4,4,4,4,4), sep=" "))
read.fwf("wkst.for", widths=c(9,4,4,4,4,4,4,4,4), sep="")
read.fwf("wkst.for", widths=c(9,4,4,4,4,4,4,4,4))
read.fwf("wkst.for", widths=c(10,4,4,4,4,4,4,4,4))
read.fwf("wkst.for", widths=c(10,5,4,4,4,4,4,4,4))
read.fwf("wkst.for", widths=c(10,5,4,5,4,4,4,4,4))
read.fwf("wkst.for", widths=c(10,5,4,5,4,5,4,4,4))
read.fwf("wkst.for", widths=c(10,5,4,5,4,5,4,5,4))
read.fwf("wkst.for", widths=c(10,5,4,5,4,5,4,4,4))
read.fwf("wkst.for", widths=c(10,5,4,5,4,4,4,4,4))
read.fwf("wkst.for", widths=c(10,5,4,5,4,5,4,4,4))
read.fwf("wkst.for", widths=c(10,5,4,5,5,5,4,4,4))
read.fwf("wkst.for", widths=c(10,5,5,5,5,5,4,4,4))
read.fwf("wkst.for", widths=c(10,5,4,5,5,5,4,4,4))
read.fwf("wkst.for", widths=c(10,5,4,5,4,5,4,4,4))
data <- read.fwf("wkst.for", widths=c(10,5,4,5,4,5,4,4,4))
data[4,]
data[,4
]
data[,1]
data[,2]
read.fwf("wkst.for", widths=c(10,5,4,5,4,5,4,4,4), 1)
read.fwf("wkst.for", widths=c(10,5,4,5,4,5,4,4,4), n=1)
read.fwf("wkst.for", widths=c(10,5,4,5,4,5,4,4,4), n=2)
read.fwf("wkst.for", widths=c(10,5,4,5,4,5,4,4,4), n=3)
read.fwf("wkst.for", widths=c(10,5,4,5,4,5,4,4,4), skip.blank.lines=TRUE)
read.fwf("wkst.for", widths=c(9,5,4,5,4,5,4,5,4))
read.fwf("wkst.for", widths=c(9,4,4,5,4,5,4,5,4))
read.fwf("wkst.for", widths=c(10,4,4,5,4,5,4,5,4))
read.fwf("wkst.for", widths=c(13,4,4,4,4,4,4,4,4))
read.fwf("wkst.for", widths=c(14,4,4,4,4,4,4,4,4))
read.fwf("wkst.for", widths=c(14,45,4,4,4,4,4,4,4))
read.fwf("wkst.for", widths=c(14,4,4,4,4,4,4,4,4))
read.fwf("wkst.for", widths=c(14,5,4,4,4,4,4,4,4))
read.fwf("wkst.for", widths(14,4,4,5))
read.fwf("wkst.for", widths=c(14,4,4,5))
read.fwf("wkst.for", widths=c(14,4,4))
read.fwf("wkst.for", widths=c(15,4,4))
read.fwf("wkst.for", widths=c(15,4,4,5,4,4,5,4,4,5,4,4,5))
data <- read.fwf("wkst.for", widths=c(15,4,4,5,4,4,5,4,4,5,4,4,5))
data[4,]
data[5,]
data[,5
data[,5]
data[,5]
data[10,]
data$V6
sum(data$V6)
?sum
result <- as.numeric(data$V6)
sum(result)
result <- as.numeric(data$V6)
result
sum(data$V6)
data$V6
data <- read.fwf("wkst.for", widths=c(15,4,4,5,4,4,5,4,4,5,4,4,5), header=TRUE)
data <- read.fwf("wkst.for", widths=c(15,4,4,5,4,4,5,4,4,5,4,4,5), skip=2)
data
data[1,]
data <- read.fwf("wkst.for", widths=c(15,4,4,5,4,4,5,4,4,5,4,4,5), skip=3)
data[1,]
data <- read.fwf("wkst.for", widths=c(15,4,4,5,4,4,5,4,4,5,4,4,5), skip=4)
data[1,]
data$V6
sum(data$V6)
data[1,]
sum(data$V5)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
str(mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"))
qplot(displ, hwy, data=mpg, fill=drv)
qplot(hwy, data=mpg, fill=drv)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
nlme
summary(Diet)
summary(BodyWeight)
?xyplot
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data=airquality)
p
?splom
?trellis
?trellis.par.set
library(datasets)
data(airquality)
head(airquality)
library(ggplot2)
g <- ggplot(movies, aes(votes,rating))
print(g)
?llines
?lines
?points
?axis
?llines
library(datasets)
data("airquality")
head(airquality)
?asPosixCT
?asPosixCt
?as.POSIXct
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "acs.csv")
acs <- read.csv("acs.csv")
?strsplit
strsplit(names(acs), "wgtp")
names(acs)
strsplit(names(acs), "wgtp")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", gdp.csv)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", "gdp.csv")
read.csv("gdp.csv", skip=4, nrows = 190)
gdp <- read.csv("gdp.csv", skip=4, nrows = 190)
?gsub
gsub(",", "", gdp$X.5)
gsub(",", "", gdp$X.6)
gsub(",", "", gdp$X.5)
gdp$X.5
gdp$X.4
gsub(",", "", gdp$X.4)
as.numeric(gsub(",", "", gdp$X.4))
ave(as.numeric(gsub(",", "", gdp$X.4)))
gdp
head(gdp)
grep("^United", gdp$X.3)
gdp$X.3
grep("^United", gdp$X.3)
grep("United", gdp$X.3)
grep("^United", gdp$X.3)
grep("^United", gdp$X.3, value = TRUE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", "ed.csv")
read.csv("ed.csv")
ed <- read.csv("ed.csv")
names(gdp)
head(gdp)
merge(gdp, ed, by.x="X.3", by.y="Short.Name")
res <- merge(gdp, ed, by.x="X.3", by.y="Short.Name")
res$National.accounts.reference.year
res$Special.Notes
?grep
grep("June", res$Special.Notes)
grep("June", res$Special.Notes, value = TRUE)
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN", auto.assign = FALSE)
sampleTimes = index(amzn)
head(sampleTimes)
sampleTimes[0]
sampleTimes
sampleTimes[sampleTimes > 2011]
sampleTimes[sampleTimes > 2012]
sampleTimes[sampleTimes > "2011-12-31" & sampleTimes < "2013-01-01"]
sampleTimes[sampleTimes >= "2012-01-01" & sampleTimes < "2012-12-31"]
format(sampleTimes, "%Y")
format(sampleTimes, "%Y")
years <- format(sampleTimes, "%Y")
years[years==2012]
years
format(sampleTimes, "%Y")
years[years==2012]
sampleTimes[sampleTimes >= "2012-01-01" & sampleTimes < "2012-12-31"]
sampleTimes[sampleTimes >= "2012-01-01" & sampleTimes <= "2012-12-31"]
wday(sampleTimes[sampleTimes >= "2012-01-01" & sampleTimes <= "2012-12-31"], value=TRUE)
library(lubridate)
install.packages("lubridate")
library(lubridate)
wday(sampleTimes[sampleTimes >= "2012-01-01" & sampleTimes <= "2012-12-31"], value=TRUE)
wday(sampleTimes[sampleTimes >= "2012-01-01" & sampleTimes <= "2012-12-31"])
wday(sampleTimes[sampleTimes >= "2012-01-01" & sampleTimes <= "2012-12-31"], label = TRUE
)
wdays <- wday(sampleTimes[sampleTimes >= "2012-01-01" & sampleTimes <= "2012-12-31"], label = TRUE)
wdays[wdays="Mon"]
wdays[wdays=="Mon"]
wdays[wdays=="Mon"]
res <- wdays[wdays=="Mon"]
?fulldata
?group_by
library(plyr)
?group_by
?barplot
?dev.copy
set.seed(1234)
par(mar = c(0,0,0,0))
x <- rnorm(12, mean=rep(1:3, each=4), sd=0.2)
y <- rnorm(12, mean=rep(1,2,1, each=4), sd=0.2)
x
y
?rnorm
rep(1:3, each=4)
rep(1,2,1), each=4)
rep(1,2,1,each=4)
y <- rnorm(12, mean=rep(c(1,2,1), each=4), sd=0.2)
y
set.seed(1234)
par(mar = c(0,0,0,0))
x <- rnorm(12, mean=rep(1:3, each=4), sd=0.2)
y <- rnorm(12, mean=rep(c(1,2,1), each=4), sd=0.2)
plot(x,y,col="blue", pch=19, cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
dataFrame <- data.frame(x=x, y=y)
dataFrame
dist(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
x
y
kmeansObj <- kmeans(dataFrame, centers=3)
names(kmeansObj)
kmeansObj$cluster
par(mar = rep(0.2,4))
plot(x,y,col=kmeansObj$cluster, pch=19, cex=2)
points(kmeansObj$centers, col=1:3, pch=3, cex=3, lwd=3)
install.packages("xtable")
setwd("~/")
setwd("~/Documents/git_davedev/RepData_PeerAssessment1")
```{r loaddata, echo=TRUE}
unzip("activity.zip")
stepsdata <- read.csv("activity.csv")
```
library(plyr)
dailystepsdata <- ddply(stepsdata, .(date), summarize, totSteps=sum(steps))
# First, we display a histogram of the steps per day.
hist(dailystepsdata$totSteps,
xlab="steps per day",
ylab="frequency",
main="Histogram of Steps per Day")
# Next, simply compute the mean, without NA values
dailymeansteps <- mean(dailystepsdata$totSteps, na.rm=TRUE)
dailymeansteps
# Similar for median
dailymediansteps <- median(dailystepsdata$totSteps, na.rm=TRUE)
dailymediansteps
intavgstepsdata <- ddply(stepsdata,
.(interval),
summarize,
avgsteps=mean(steps, na.rm=TRUE))
intervalTicks <- c(0, 400, 800, 1200, 1600, 2000, 2400)
plot(intavgstepsdata,
type="l",
xlab="Interval Time (HHMM)",
ylab="Average number of steps",
main="Average Number of Steps per 5-minute interval, 0000-2355 daily",
xaxt="n",
xlim=range(intervalTicks))
axis(side=1, at=intervalTicks, labels=sprintf("%04d", intervalTicks))
maxRowIndex <- which.max(intavgstepsdata$avgsteps)
maxInterval <- intavgstepsdata[maxRowIndex,c("interval")]
maxInterval
numNACases <- sum(!complete.cases(stepsdata))
numNACases
t <- stepsdata[1:10,]
t[is.na(t$interval)]
u <- t[is.na(t$interval)]
u
u <- t[is.na(t$interval),]
u
u <- t[is.na(t$steps)]
t[is.na(t$steps)]
t[is.na(t$steps),]
t[is.na(t$steps),c("steps")
)
]
t[is.na(t$steps),]
t[is.na(t$steps),]$steps
t[is.na(t$steps),]$steps <- intavgstepsdata[t$interval]
t[is.na(t$steps),]$steps <- intavgstepsdata[t$interval,c("avgsteps")]
intavgstepsdata[t$interval,c("avgsteps")]
t$interval
intavgstepsdata[which(intavgstepsdata$interval==t$interval),c("avgsteps")]
intavgstepsdata$interval
intavgstepsdata[which(intavgstepsdata$interval==t$interval),c("avgsteps")]
which(intavgstepsdata$interval %in% t$interval)
col <- which(intavgstepsdata$interval %in% t$interval)
z <- intavgstepsdata$interval[,col]
col$i
intavgstepsdata[,col]
intavgstepsdata$avgsteps[,col]
?within
?gsub
within(t, is.na(t$steps))
?within
?replace
?mutate
?replace
replace(t, is.na(t), intavgstepsdata[t$interval,c("avgsteps")])
replace(t$steps. is.na(t$steps), 4)
replace(t$steps. is.na(), 4)
t$stpes
t$steps
replace(t$steps. NA, 4)
u <_ t
u <- t
t
replace(u, is.na(u), 0)
replace(u$steps, is.na(u$steps), 0)
u <- t
replace(u, is.na(u$steps), 4)
replace(u, is.na(u), 4)
u <- t
u
replace(u$steps, is.na(u$steps), 0)
u <- t
u
?mutate
?match
t[,c("steps")][intavgstepsdata$avgsteps]
t$steps[match(t$interval, intavgstepsdata$interval)]
match(t$interval, intavgstepsdata$interval)
t[,2]
t[,1]
t$steps
match(t$interval, intavgstepsdata$interval)
[match(t$interval, intavgstepsdata$interval)]
t[match(t$interval, intavgstepsdata$interval)]
t$steps[match(t$interval, intavgstepsdata$interval)]
intavgstepsdata$avgsteps[match(t$interval, intavgstepsdata$interval)]
u$steps <- intavgstepsdata$avgsteps[match(t$interval, intavgstepsdata$interval)]
u
intavgstepsdata
head(intavgstepsdata)
u
t
u < ifelse(is.na(t$steps), intavgstepsdata$avgsteps[match(t$interval, intavgstepsdata$interval)], t$steps)
u <- ifelse(is.na(t$steps), intavgstepsdata$avgsteps[match(t$interval, intavgstepsdata$interval)], t$steps)
u
t <- stepsdata[100:110,]
t
t <- stepsdata[1000:1010,]
t
u <- ifelse(is.na(t$steps), intavgstepsdata$avgsteps[match(t$interval, intavgstepsdata$interval)], t$steps)
u
t
u <- t
u$steps <- ifelse(is.na(t$steps), intavgstepsdata$avgsteps[match(t$interval, intavgstepsdata$interval)], t$steps)
u
stepsdataimputeNA <- stepsdata
stepsdataimputeNA$steps <-
ifelse(is.na(stepsdataimputeNA$steps),
intavgstepsdata$avgsteps[match(stepsdataimputeNA$interval,
intavgstepsdata$interval)],
stepsdataimputeNA$steps)
head(stepsdataimputNA)
head(stepsdataimputeNA)
head(intavgstepsdata)
stepsdataimputeNA[1000:1010,]
weekdays(stepsdataimputeNA[1:10,])
?weekdays
weekdays(stepsdataimputeNA[1:10,c("date")])
as.Date(stepsdataimputeNA[1:10,c("date")])
weekdays(as.Date(stepsdataimputeNA[1:10,c("date")]))
m <- weekdays(stepsdataimputeNA[1:10,c("date")])
m <- weekdays(as.Date(stepsdataimputeNA[1:10,c("date")]))
ifelse(m %in% c("Saturday", "Sunday"), "weekend", "weekday")
stepsdataimputeNA$weekday <- weekdays(as.Date(stepsdataimputeNA$date))
stepsdataimputeNA$weekday <- ifelse(stepsdataimputeNA$weekday %in% c("Saturday", "Sunday"), "weekend", "weekday")
summary(stepsdataimputeNA$weekday)
summary(as.factor(stepsdataimputeNA$weekday))
stepsdataimputeNA$weekday <- as.factor(ifelse(stepsdataimputeNA$weekday %in% c("Saturday", "Sunday"), "weekend", "weekday"))
summary( stepsdataimputeNA$weekday)
stepsdataimputeNA$weekday <- ifelse(stepsdataimputeNA$weekday %in% c("Saturday", "Sunday"), "weekend", "weekday")
summary(as.factor(stepsdataimputeNA$weekday))
stepsdataimputeNA$weekday <- weekdays(as.Date(stepsdataimputeNA$date))
stepsdataimputeNA$weekday <- ifelse(stepsdataimputeNA$weekday %in% c("Saturday", "Sunday"), "weekend", "weekday")
summary(as.factor(stepsdataimputeNA$weekday))
stepsdataimputeNA$weekday <- weekdays(as.Date(stepsdataimputeNA$date))
stepsdataimputeNA$weekday <- as.factor(ifelse(stepsdataimputeNA$weekday %in% c("Saturday", "Sunday"), "weekend", "weekday"))
summary(stepsdataimputeNA$weekday)
library(lattice)
?xyplot
intavgstepsdataimputeNA <- ddply(stepsdataimputeNA,
.(interval),
summarize,
avgsteps=mean(steps))
xyplot(avgsteps ~ interval, intavgstepsdataimputeNA)
xyplot(avgsteps ~ interval, intavgstepsdataimputeNA, type="l")
xyplot(avgsteps ~ interval | weekday, intavgstepsdataimputeNA, type="l")
intavgstepsdata
intavgstepsdataimputeNA <- ddply(stepsdataimputeNA,
.(interval, weekday),
summarize,
avgsteps=mean(steps))
xyplot(avgsteps ~ interval | weekday, intavgstepsdataimputeNA, type="l")
?xyplot
xyplot(avgsteps ~ interval | weekday, intavgstepsdataimputeNA, type="l", layout=(1,2))
xyplot(avgsteps ~ interval | weekday, intavgstepsdataimputeNA, type="l", layout=c(1,2))
xyplot(avgsteps ~ interval | weekday, intavgstepsdataimputeNA, type="l", layout=c(1,2), xlab="Interval Time (HHMM)", ylab="Average number of steps")
xyplot(avgsteps ~ interval | weekday, intavgstepsdataimputeNA, type="l", layout=c(1,2), xlab="Interval Time (HHMM)", ylab="Average number of steps", main="Average Number of Steps per 5-minute interval, 0000-2355 daily")
xyplot(avgsteps ~ interval | weekday, intavgstepsdataimputeNA, type="l", layout=c(1,2), xlab="Interval Time (HHMM)", ylab="Average number of steps", main="Average Number of Steps per 5-minute interval, 0000-2355 daily", xaxt="n')"
xyplot(avgsteps ~ interval | weekday, intavgstepsdataimputeNA, type="l", layout=c(1,2), xlab="Interval Time (HHMM)", ylab="Average number of steps", main="Average Number of Steps per 5-minute interval, 0000-2355 daily", xaxt="n")
xyplot(avgsteps ~ interval | weekday, intavgstepsdataimputeNA, type="l", layout=c(1,2), xlab="Interval Time (HHMM)", ylab="Average number of steps", main="Average Number of Steps per 5-minute interval, 0000-2355 daily", xlim = range(intervalticks)
)
xyplot(avgsteps ~ interval | weekday, intavgstepsdataimputeNA, type="l", layout=c(1,2), xlab="Interval Time (HHMM)", ylab="Average number of steps", main="Average Number of Steps per 5-minute interval, 0000-2355 daily", xlim = range(intervalTicks))
xyplot(avgsteps ~ interval | weekday, intavgstepsdataimputeNA, type="l", layout=c(1,2), xlab="Interval Time (HHMM)", ylab="Average number of steps", main="Average Number of Steps per 5-minute interval, 0000-2355 daily")
?xyplot
xyplot(avgsteps ~ interval | weekday, intavgstepsdataimputeNA, type="l", layout=c(1,2), xlab="Interval Time (HHMM)", ylab="Average number of steps", main="Average Number of Steps per 5-minute interval, 0000-2355 daily", scales=list(x=list(at=c(0, 400, 800, 1200,1600,2000,2400))
)
)
xyplot(avgsteps ~ interval | weekday, intavgstepsdataimputeNA, type="l", layout=c(1,2), xlab="Interval Time (HHMM)", ylab="Average number of steps", main="Average Number of Steps per 5-minute interval, 0000-2355 daily", scales=list(x=list(at=c(0, 400, 800, 1200,1600,2000,2400), labels=c("0000", "0400", "0800", "1200", "1600", "2000", "2400"))))
